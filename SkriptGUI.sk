#Version: v1.0-reborn-alpha2
#Don't change these (^*) lines!
import:
	me.clip.placeholderapi.PlaceholderAPI
	java.nio.file.Path
	java.nio.file.Files
	java.nio.file.Paths
expression placeholder parsed %$strings% [from %-player%]:
	return type: string
	get:
		loop expressions-1:
			add PlaceholderAPI.setPlaceholders(expression-2 and loop-value) to {_return::*}
		return {_return::*}
command /skgui [<text="help">] [<text>] [<text>] [<text>] [<text>]:
	trigger:
		if executor has permission "%{SkriptGUI::adminPerm}%":
			if arg-1 is "help":
				send formatted "%placeholder parsed {SkriptGUI::helpCMD::*} from player%"
			else if arg-1 is "reload" or "rl":
				if arg-2 isn't set:
					set {_systemMS} to current system milliseconds
					if dir "plugins/SkriptGUI/" doesn't exist:
						create dir "plugins/SkriptGUI/GUIs/" 
						set file contents of "plugins/SkriptGUI/GUIs/example.yml" to contents from url "https://raw.githubusercontent.com/bilektugrul/SkriptGUI/master/SkriptGUI/GUIs/example.yml"
						set file contents of "plugins/SkriptGUI/config.yml" to contents from url "https://raw.githubusercontent.com/bilektugrul/SkriptGUI/master/SkriptGUI/config.yml"	
						set file contents of "plugins/SkriptGUI/signData.yml" to contents from url "https://raw.githubusercontent.com/bilektugrul/SkriptGUI/master/SkriptGUI/signData.yml"	
					execute executor command "skgui reload config"
					execute executor command "skgui reload signs"
					if line 1 in file "plugins/Skript/scripts/%script's name%.sk" isn't line 1 from url "https://raw.githubusercontent.com/bilektugrul/SkriptGUI/master/SkriptGUI.sk":
						send "%{SkriptGUI::prefix}% &cYou're running with outdated version of SkriptGUI." and "%{SkriptGUI::prefix}% &cPlease update from &ehttps://github.com/bilektugrul/SkriptGUI/releases" to executor
						if executor is a player:
							send "%{SkriptGUI::prefix}% &2&n<cmd:/skgui update>Click here for directly update system!" and last character of new line to executor
						else:
							send "%{SkriptGUI::prefix}% &2You can directly update this system in game with command &8""&2/skgui update&8""&2."
					else:
						send "%{SkriptGUI::prefix}% &2You're running with latest version of SkriptGUI." and "%{SkriptGUI::prefix}% &2Thanks!" to executor
					loop files in directory "plugins/SkriptGUI/GUIs":
						if first character of name of file loop-value isn't "-":
							load yaml "plugins/SkriptGUI/GUIs/%name of file loop-value%.yml" as "SkriptGUI/GUIs/%name of file loop-value%.yml"
							add 1 to {_guiAmount}
					loop loaded yaml:
						if loop-value contains "SkriptGUI/GUIs/":
							if file "plugins/%loop-value%" doesn't exist:
								unload yaml loop-value
					send "%{SkriptGUI::prefix}% &2Succesfully reloaded with &e%{_guiAmount}% &2GUI. &8(&e%difference between {_systemMS} and current system milliseconds% ms&8)" to executor
				else if yaml "SkriptGUI/GUIs/%arg-2%.yml" is loaded:
					set {_systemMS} to current system milliseconds				
					load yaml "plugins/SkriptGUI/GUIs/%arg-2%.yml" as "SkriptGUI/GUIs/%arg-2%.yml"
					send "%{SkriptGUI::prefix}% &2GUI &e%arg-2% &2is succesfully reloaded. &8(&e%difference between {_systemMS} and current system milliseconds% ms&8)" to executor
				else if arg-2 is "config":
					set {_systemMS} to current system milliseconds	
					load yaml "plugins/SkriptGUI/config.yml" as "SkriptGUI/config"
					set {SkriptGUI::adminPerm} to yaml value "admin-permission" from "SkriptGUI/config"
					set {SkriptGUI::prefix} to yaml value "prefix" from "SkriptGUI/config"
					set {SkriptGUI::noPermMSG} to yaml value "no-permission-message" from "SkriptGUI/config"
					set {SkriptGUI::helpCMD::*} to colored join yaml list "help-command" from "SkriptGUI/config" with last character of new line
					replace "%%prefix%%" with {SkriptGUI::prefix} in {SkriptGUI::noPermMSG}
					replace "%%prefix%%" with {SkriptGUI::prefix} in {SkriptGUI::helpCMD::*}
					send "%{SkriptGUI::prefix}% &eConfig &2succesfully reloaded. &8(&e%difference between {_systemMS} and current system milliseconds% ms&8)"
				else if arg-2 is "signs":
					set {_systemMS} to current system milliseconds	
					load yaml "plugins/SkriptGUI/signData.yml" as "SkriptGUI/signData"
					loop yaml node keys "signDatas" from "SkriptGUI/signData":
						if block at yaml value "signDatas.%loop-value-1%.location" from "SkriptGUI/signData" is sign:
							loop 4 times:
								if (loop-number)st element of yaml list "signDatas.%loop-value-1%.lines" from "SkriptGUI/signData" is set:
									set {_line::%loop-number%} to (loop-number)st element of yaml list "signDatas.%loop-value-1%.lines" from "SkriptGUI/signData"
									set line loop-number of (block at yaml value "signDatas.%loop-value-1%.location" from "SkriptGUI/signData") to colored "%{_line::%loop-number%}%"
								else:
									set line loop-number of (block at yaml value "signDatas.%loop-value-1%.location" from "SkriptGUI/signData") to ""
						else:
							delete yaml value "signDatas.%loop-value-1%.location" from "SkriptGUI/signData" 
					send "%{SkriptGUI::prefix}% &eSigns &2succesfully reloaded. &8(&e%difference between {_systemMS} and current system milliseconds% ms&8)"
				else:
					send "%{SkriptGUI::prefix}% &cThere is no GUI with this ID."
			else if arg-1 is "disable":
				if yaml "SkriptGUI/GUIs/%arg-2%.yml" is loaded:
					save yaml "SkriptGUI/GUIs/%arg-2%.yml"
					unload yaml "SkriptGUI/GUIs/%arg-2%.yml"
					set {_name} to name of file "plugins/SkriptGUI/GUIs/%arg-2%.yml"
					rename file "plugins/SkriptGUI/GUIs/%arg-2%.yml" to "-%{_name}%.yml"
					send "%{SkriptGUI::prefix}% &2GUI &e%arg-2% &2succesfully disabled."
				else:
					send "%{SkriptGUI::prefix}% &cThere is no GUI with this ID."
			else if arg-1 is "enable":
				if yaml "SkriptGUI/GUIs/%arg-2%.yml" isn't loaded:
					if file "plugins/SkriptGUI/GUIs/-%arg-2%.yml" exists:
						set {_name} to name of file "plugins/SkriptGUI/GUIs/-%arg-2%.yml"
						replace "-" with "" in {_name}
						rename file "plugins/SkriptGUI/GUIs/-%arg-2%.yml" to "%{_name}%.yml"
						load yaml "plugins/SkriptGUI/GUIs/%arg-2%.yml" as "SkriptGUI/GUIs/%arg-2%.yml"
						send "%{SkriptGUI::prefix}% &2GUI &e%arg-2% &2succesfully enabled."
					else:
						send "%{SkriptGUI::prefix}% &cThere is no GUI with this ID."
				else:
					send "%{SkriptGUI::prefix}% &cThere is already a GUI with this ID."
			else if arg-1 is "open":
				if yaml "SkriptGUI/GUIs/%arg-2%.yml" is loaded:
					openGUI((arg-3 parsed as player if arg-3 is set else player), arg-2)
				else:
					send "%{SkriptGUI::prefix}% &cThere is no GUI with this ID."
			else if arg-1 is "create":
				if arg-2 is set:
					if yaml "SkriptGUI/GUIs/%arg-2%.yml" isn't loaded:
						if arg-3 parsed as integer is set:
							if arg-4 is set:
								if arg-5 is "true":
									set {SkriptGUI::creatingGUI::%player%::NBT} to true
								set {SkriptGUI::creatingGUI::%player%} to true
								set {SkriptGUI::creatingGUI::%player%::id} to arg-2
								set {SkriptGUI::creatingGUI::%player%::size} to arg-3 parsed as integer
								set {SkriptGUI::creatingGUI::%player%::name} to arg-4
								send "%{SkriptGUI::prefix}% &2Edit the GUI however you want. After that, close it. The system will take care of the rest."
								open virtual chest inventory named placeholder parsed colored arg-4 from player with size arg-3 parsed as integer to player
							else:
								send "%{SkriptGUI::prefix}% &cPlease enter a GUI name."
						else:
							send "%{SkriptGUI::prefix}% &cPlease enter a GUI size."
					else:
						send "%{SkriptGUI::prefix}% &cYou can't create this GUI because there is already a GUI with this ID."
				else:
					send "%{SkriptGUI::prefix}% &cPlease enter a GUI ID."
			else if arg-1 is "update":
				if line 1 in file "plugins/Skript/scripts/%script's name%.sk" isn't line 1 from url "https://raw.githubusercontent.com/bilektugrul/SkriptGUI/master/SkriptGUI.sk":
					set {_systemMS} to current system milliseconds
					set {_fileName} to line 1 in file "plugins/Skript/scripts/%script's name%.sk"
					replace "##Version: " with "" in {_fileName}
					create directory "plugins/SkriptGUI/backups"
					set file contents of "plugins/SkriptGUI/backups/SkriptGUI (%{_fileName}%).sk" to file contents of "plugins/Skript/scripts/%script's name%.sk"
					set file contents of "plugins/Skript/scripts/%script's name%.sk" to contents from url "https://raw.githubusercontent.com/bilektugrul/SkriptGUI/master/SkriptGUI.sk"
					execute executor command "sk reload %script's name%"
					send "%{SkriptGUI::prefix}% &2Succesfully updated and reloaded! &8(&e%difference between {_systemMS} and current system milliseconds% ms&8)" and "%{SkriptGUI::prefix}% &2Old version codes have been backed up."
				else:
					send "%{SkriptGUI::prefix}% &cYou're already running with latest version of SkriptGUI." to executor
			else if arg-1 is "sign":
				if arg-2 is "create":
					if yaml "SkriptGUI/GUIs/%arg-3%.yml" is loaded:
						if targeted block is sign:
							set {_size} to size of yaml node keys "signDatas" from "SkriptGUI/signData"
							set yaml value "signDatas.%{_size} + 1%.location" from "SkriptGUI/signData" to targeted block's location
							set yaml value "signDatas.%{_size} + 1%.GUI" from "SkriptGUI/signData" to arg-3
							loop 4 times:
								add line loop-number of targeted block to yaml list "signDatas.%{_size} + 1%.lines" from "SkriptGUI/signData"
							send "%{SkriptGUI::prefix}% &2You succesfully created a GUI sign."
							save yaml "SkriptGUI/signData" without extra lines between nodes
						else:
							send "%{SkriptGUI::prefix}% &cYou are not looking at a sign."
					else:
						send "%{SkriptGUI::prefix}% &cThere is no GUI with this ID."
			else if arg-1 is "list":
				loop loaded yaml:
					if loop-value contains "SkriptGUI/GUIs/":
						set {_name} to last element of (loop-value split at "SkriptGUI/GUIs/") 
						set {_list::%{_name}%} to {_name}
						set {_list::%{_name}%::size} to Files.size(Paths.get("plugins/SkriptGUI/GUIs/%{_name}%"))
				send "%{SkriptGUI::prefix}% &aGUI list:"
				loop {_list::*}:
					send formatted " &e> %loop-value% &8(&f%{_list::%loop-index%::size}/1000% &eKB&8) "
					add "%{_list::%loop-index%::size}%" parsed as number to {_totalsize}
				send formatted "%{SkriptGUI::prefix}% &aTotal size of GUIs in disc: &e%{_totalsize}/1000% &fKB"
			else:
				send "%{SkriptGUI::prefix}% &cInvalid argument." 
				execute executor command "skgui help"
		else:
			send placeholder parsed {SkriptGUI::noPermMSG} from player
function openGUI(player: player, gui: text):
	if yaml value "gui.world-check.enabled" from "SkriptGUI/GUIs/%{_gui}%.yml" is true:
		if yaml list "gui.world-check.enabled-worlds" from "SkriptGUI/GUIs/%{_gui}%.yml" doesn't contain "%{_player}'s world%":
			returnDenyEvents("gui.world-check", {_gui}, {_player})
			stop
	set {_openable} to requirementCheck("gui.open-requirement.requirements", {_gui}, {_player})
	if  {_openable} is true:
		set {_size} to yaml value "gui.size" from "SkriptGUI/GUIs/%{_gui}%.yml"
		set {_name} to yaml value "gui.name" from "SkriptGUI/GUIs/%{_gui}%.yml"
		set {_update-ticks} to yaml value "gui.update-ticks" from "SkriptGUI/GUIs/%{_gui}%.yml"
		open virtual chest inventory named placeholder parsed colored {_name} from {_player} with size {_size} to {_player}
		set metadata value "GUI" of {_player} to {_gui}
		set {_open-commands::player::*} to placeholder parsed yaml list "gui.open-commands.player" from "SkriptGUI/GUIs/%{_gui}%.yml" from {_player}
		set {_open-commands::console::*} to placeholder parsed yaml list "gui.open-commands.console" from "SkriptGUI/GUIs/%{_gui}%.yml" from {_player}
		set {_open-messages::*} to placeholder parsed yaml list "gui.open-messages" from "SkriptGUI/GUIs/%{_gui}%.yml" from {_player}
		loop {_open-commands::player::*}:
			execute {_player} command loop-value
		loop {_open-commands::console::*}:
			execute console command loop-value
		replace "%%prefix%%" with "%{skriptgui::prefix}%" in {_open-messages::*}
		send colored join {_open-messages::*} with last character of new line to {_player}
		if yaml value "gui.update" from "SkriptGUI/GUIs/%{_gui}%.yml" is true:
			while {_player}.getOpenInventory().getTitle() is placeholder parsed {_name} from {_player}:
				forceOpenGUI({_player}, {_gui}, false, 0, {_name})
				wait "%{_update-ticks}% ticks" parsed as timespan
		else:
			forceOpenGUI({_player}, {_gui}, false, 0, {_name})
	else:
		returnDenyEvents("gui.open-requirement", {_gui}, {_player})
function forceOpenGUI(player: player, gui: text, virtual: boolean, size: integer, name: text):
	if {_virtual} is true:
		open virtual chest inventory named placeholder parsed colored {_name} from {_player} with size {_size} to {_player}
	loop yaml node keys "gui.slots" from "SkriptGUI/GUIs/%{_gui}%.yml":
		set {_value} to loop-value
		set {_GUI::item} to enchanted book if placeholder parsed yaml value "gui.slots.%{_value}%.item.material" from "SkriptGUI/GUIs/%{_gui}%.yml" is "enchanted book" otherwise placeholder parsed yaml value "gui.slots.%{_value}%.item.material" from "SkriptGUI/GUIs/%{_gui}%.yml"
		set {_GUI::item} to "%{_GUI::item}%" parsed as material
		set {_GUI::itemNBT} to placeholder parsed yaml value "gui.slots.%{_value}%.item.NBT" from "SkriptGUI/GUIs/%{_gui}%.yml" from {_player}
		set {_GUI::itemAmount} to yaml value "gui.slots.%{_value}%.item.amount" from "SkriptGUI/GUIs/%{_gui}%.yml"
		set {_GUI::slot} to yaml value "gui.slots.%{_value}%.slot" from "SkriptGUI/GUIs/%{_gui}%.yml"
		loop {SkriptGUI::guiClickTypes::*} and "click":	
			set {_GUI::%loop-value-2.toString()%::playerCommands::*} to placeholder parsed yaml list "gui.slots.%{_value}%.commands.%loop-value-2%.player-commands" from "SkriptGUI/GUIs/%{_gui}%.yml" from {_player}
			set {_GUI::%loop-value-2.toString()%::consoleCommands::*} to placeholder parsed yaml list "gui.slots.%{_value}%.commands.%loop-value-2%.console-commands" from "SkriptGUI/GUIs/%{_gui}%.yml" from {_player}
		set {_GUI::itemLore::*} to placeholder parsed yaml list "gui.slots.%{_value}%.item.lore" from "SkriptGUI/GUIs/%{_gui}%.yml" from {_player}
		set {_GUI::itemName} to placeholder parsed yaml value "gui.slots.%{_value}%.item.material-name" from "SkriptGUI/GUIs/%{_gui}%.yml" from {_player}
		set {_GUI::skullOwner} to yaml value "gui.slots.%{_value}%.item.skull.owner" from "SkriptGUI/GUIs/%{_gui}%.yml"
		set {_GUI::skullID} to yaml value "gui.slots.%{_value}%.item.skull.id" from "SkriptGUI/GUIs/%{_gui}%.yml"
		set {_GUI::skullValue} to yaml value "gui.slots.%{_value}%.item.skull.texture-value" from "SkriptGUI/GUIs/%{_gui}%.yml"
		if {_GUI::itemNBT} is set:
			set {_GUI::item} to {_GUI::item} with nbt {_GUI::itemNBT}
		else:
			if {_GUI::skullOwner} is set:
				set {_GUI::item} to skull of "%{_GUI::skullOwner}%" parsed as offlineplayer
			if {_GUI::skullID} is set:
				if {_GUI::skullValue} is set:
					set {_GUI::item} to skull from skin with value "%{_GUI::skullValue}%" signature "%{_GUI::skullID}%"
			loop yaml list "gui.slots.%loop-value%.item.enchants" from "SkriptGUI/GUIs/%{_gui}%.yml":
				enchant {_GUI::item} with "%loop-value-2%" parsed as enchantment type
			if yaml value "gui.slots.%loop-value%.item.shiny" from "SkriptGUI/GUIs/%{_gui}%.yml" is true:
				set {_GUI::item} to shiny {_GUI::item}
			if yaml value "gui.slots.%loop-value%.item.hide-flags" from "SkriptGUI/GUIs/%{_gui}%.yml" is true:
				set {_GUI::item} to {_GUI::item} with no nbt
			if {_GUI::itemName} is set:
				set {_GUI::item} to {_GUI::item} named placeholder parsed colored {_GUI::itemName}
		set {_viewable} to requirementCheck("gui.slots.%{_value}%.item.view-requirement.requirements", {_gui}, {_player})
		if {_viewable} is true:
			make gui slot {_GUI::slot} of {_player} with ({_GUI::itemAmount} otherwise 1) of {_GUI::item} with lore {_GUI::itemLore::*} to run:
				
				set {_clickType} to "%gui-click-type%"
				if yaml value "gui.slots.%{_value}%.close-on-click" from "SkriptGUI/GUIs/%{_gui}%.yml" is true:
					close {_player}'s inventory
				if {_GUI::%{_clickType}%::playerCommands::*} or {_GUI::%{_clickType}%::consoleCommands::*} are set:
					set {_clickable} to requirementCheck("gui.slots.%{_value}%.commands.%{_clickType}%.requirement.requirements", {_gui}, {_player})
					if {_clickable} is true:
						loop {_GUI::%{_clickType}%::consoleCommands::*}:
							execute console command loop-value-2
						loop {_GUI::%{_clickType}%::playerCommands::*}:
							execute {_player} command loop-value-2
					else:
						returnDenyEvents("gui.slots.%{_value}%.commands.rightclick.requirement", {_gui}, {_player})
				if yaml value "gui.slots.%{_value}%.commands.click" from "SkriptGUI/GUIs/%{_gui}%.yml" is set:
					set {_clickable} to requirementCheck("gui.slots.%{_value}%.commands.click.requirement.requirements", {_gui}, {_player})
					if {_clickable} is true:
						loop {_GUI::click::consoleCommands::*}:
							execute console command loop-value-2
						loop {_GUI::click::playerCommands::*}:
							execute {_player} command loop-value-2
					else:
						returnDenyEvents("gui.slots.%{_value}%.commands.rightclick.requirement", {_gui}, {_player})
		delete {_GUI::*}
function requirementCheck(value: text, gui: text, player: player) :: boolean:
	loop yaml node keys {_value} from "SkriptGUI/GUIs/%{_gui}%.yml":
		set {_output} to placeholder parsed yaml value "%{_value}%.%loop-value%.output" from "SkriptGUI/GUIs/%{_gui}%.yml" from {_player}
		set {_input} to placeholder parsed yaml value "%{_value}%.%loop-value%.input" from "SkriptGUI/GUIs/%{_gui}%.yml" from {_player}
		if yaml value "%{_value}%.%loop-value%.type" from "SkriptGUI/GUIs/%{_gui}%.yml" is "string equals ignorecase":
			if yaml value "gui.open-requirement.stop-if-a-requirement-missing" from "SkriptGUI/GUIs/%{_gui}%.yml" is true:
				if {_output} isn't placeholder parsed yaml value "%{_value}%.%loop-value%.input" from "SkriptGUI/GUIs/%{_gui}%.yml" from {_player}:
					return false
				else:
					set {_return} to true
			else if {_output} is placeholder parsed yaml value "%{_value}%.%loop-value%.input" from "SkriptGUI/GUIs/%{_gui}%.yml" from {_player}:
				set {_return} to true
		if yaml value "%{_value}%.%loop-value%.type" from "SkriptGUI/GUIs/%{_gui}%.yml" is "string equals":
			if yaml value "gui.open-requirement.stop-if-a-requirement-missing" from "SkriptGUI/GUIs/%{_gui}%.yml" is true:
				if {_output} doesn't match placeholder parsed yaml value "%{_value}%.%loop-value%.input" from "SkriptGUI/GUIs/%{_gui}%.yml" from {_player}:
					return false
				else:
					set {_return} to true
			else if {_output} matches placeholder parsed yaml value "%{_value}%.%loop-value%.input" from "SkriptGUI/GUIs/%{_gui}%.yml" from {_player}:
				set {_return} to true
		else if yaml value "%{_value}%.%loop-value%.type" from "SkriptGUI/GUIs/%{_gui}%.yml" is "string contains":
			if yaml value "gui.open-requirement.stop-if-a-requirement-missing" from "SkriptGUI/GUIs/%{_gui}%.yml" is true:
				if {_output} doesn't contain placeholder parsed yaml value "%{_value}%.%loop-value%.input" from "SkriptGUI/GUIs/%{_gui}%.yml" from {_player}:
					return false
				else:
					set {_return} to true
			else if {_output} contains placeholder parsed yaml value "%{_value}%.%loop-value%.input" from "SkriptGUI/GUIs/%{_gui}%.yml" from {_player}:
				set {_return} to true
		else if yaml value "%{_value}%.%loop-value%.type" from "SkriptGUI/GUIs/%{_gui}%.yml" is "has permission":
			set {_permission} to placeholder parsed yaml value "%{_value}%.%loop-value%.permission" from "SkriptGUI/GUIs/%{_gui}%.yml" from {_player}
			if yaml value "gui.open-requirement.stop-if-a-requirement-missing" from "SkriptGUI/GUIs/%{_gui}%.yml" is true:
				if {_player} doesn't have permission {_permission}:
					return false
				else:
					set {_return} to true
			else if {_player} has permission {_permission}:
				set {_return} to true
		else if yaml value "%{_value}%.%loop-value%.type" from "SkriptGUI/GUIs/%{_gui}%.yml" is "has money": 
			set {_money} to yaml value "%{_value}%.%loop-value%.money" from "SkriptGUI/GUIs/%{_gui}%.yml"
			if yaml value "gui.open-requirement.stop-if-a-requirement-missing" from "SkriptGUI/GUIs/%{_gui}%.yml" is true:
				if {_player}'s money isn't greater or equal to {_money}:
					return false
				else:
					set {_return} to true
			else if {_player}'s money is greater or equal to {_money}:
				set {_return} to true
		else if yaml value "%{_value}%.%loop-value%.type" from "SkriptGUI/GUIs/%{_gui}%.yml" is ">":
			if yaml value "gui.open-requirement.stop-if-a-requirement-missing" from "SkriptGUI/GUIs/%{_gui}%.yml" is true:
				if "%{_output}%" parsed as number isn't greater than "%{_input}%" parsed as number:
					return false
				else:
					set {_return} to true
			else if "%{_output}%" parsed as number is greater than "%{_input}%" parsed as number:
				set {_return} to true
		else if yaml value "%{_value}%.%loop-value%.type" from "SkriptGUI/GUIs/%{_gui}%.yml" is ">=":
			if yaml value "gui.open-requirement.stop-if-a-requirement-missing" from "SkriptGUI/GUIs/%{_gui}%.yml" is true:
				if "%{_output}%" parsed as number isn't greater or equal to "%{_input}%" parsed as number:
					return false
				else:
					set {_return} to true
			else if "%{_output}%" parsed as number is greater or equal to "%{_input}%" parsed as number:
				set {_return} to true				
		else if yaml value "%{_value}%.%loop-value%.type" from "SkriptGUI/GUIs/%{_gui}%.yml" is "=":
			if yaml value "gui.open-requirement.stop-if-a-requirement-missing" from "SkriptGUI/GUIs/%{_gui}%.yml" is true:
				if "%{_output}%" parsed as number isn't "%{_input}%" parsed as number:
					return false
				else:
					set {_return} to true
			else if "%{_output}%" parsed as number is "%{_input}%" parsed as number:
				set {_return} to true			
		else if yaml value "%{_value}%.%loop-value%.type" from "SkriptGUI/GUIs/%{_gui}%.yml" is "<=":
			if yaml value "gui.open-requirement.stop-if-a-requirement-missing" from "SkriptGUI/GUIs/%{_gui}%.yml" is true:
				if "%{_output}%" parsed as number isn't less or equal to "%{_input}%" parsed as number:
					return false
				else:
					set {_return} to true
			else if "%{_output}%" parsed as number is less or equal to "%{_input}%" parsed as number:
				set {_return} to true		
		else if yaml value "%{_value}%.%loop-value%.type" from "SkriptGUI/GUIs/%{_gui}%.yml" is "<":
			if yaml value "gui.open-requirement.stop-if-a-requirement-missing" from "SkriptGUI/GUIs/%{_gui}%.yml" is true:
				if "%{_output}%" parsed as number isn't less than "%{_input}%" parsed as number:
					return false
				else:
					set {_return} to true
			else if "%{_output}%" parsed as number is less than "%{_input}%" parsed as number:
				set {_return} to true
	return {_return} otherwise true
function returnDenyEvents(value: text, gui: text, player: player):
	set {_denyMessages::*} to placeholder parsed yaml list "%{_value}%.deny-messages" from "SkriptGUI/GUIs/%{_gui}%.yml" from {_player}
	set {_denyCommands::player::*} to placeholder parsed yaml list "%{_value}%.deny-commands.player" from "SkriptGUI/GUIs/%{_gui}%.yml" from {_player}
	set {_denyCommands::console::*} to placeholder parsed yaml list "%{_value}%.deny-commands.console" from "SkriptGUI/GUIs/%{_gui}%.yml" from {_player}
	if {_denyMessages::*} is set:
		replace "%%prefix%%" with "%{skriptgui::prefix}%" in {_denyMessages::*}
		send colored join {_denyMessages::*} with last character of new line to {_player}
	loop {_denyCommands::player::*}:
		execute {_player} command loop-value
	loop {_denyCommands::console::*}:
		execute console command loop-value
on inventory close:
	if {skriptgui::creatingGUI::%player%} is set:
		if placeholder parsed colored "%player.getOpenInventory().getTitle()%" is placeholder parsed colored {skriptgui::creatingGUI::%player%::name} from player:
			load yaml "plugins/SkriptGUI/GUIs/%{skriptgui::creatingGUI::%player%::id}%.yml" as "SkriptGUI/GUIs/%{skriptgui::creatingGUI::%player%::id}%.yml"
			set yaml value "gui.size" from "SkriptGUI/GUIs/%{skriptgui::creatingGUI::%player%::id}%.yml" to {skriptgui::creatingGUI::%player%::size}
			set yaml value "gui.name" from "SkriptGUI/GUIs/%{skriptgui::creatingGUI::%player%::id}%.yml" to {skriptgui::creatingGUI::%player%::name}
			set yaml value "gui.update" from "SkriptGUI/GUIs/%{skriptgui::creatingGUI::%player%::id}%.yml" to false
			set yaml value "gui.update-ticks" from "SkriptGUI/GUIs/%{skriptgui::creatingGUI::%player%::id}%.yml" to 20
			loop {skriptgui::creatingGUI::%player%::size} * 9 times:
				if type of slot (loop-number - 1) of event-inventory isn't air:
					set yaml value "gui.slots.slot-%loop-number - 1%.item.material" from "SkriptGUI/GUIs/%{skriptgui::creatingGUI::%player%::id}%.yml" to "%type of slot (loop-number - 1) of event-inventory%"
					set yaml value "gui.slots.slot-%loop-number - 1%.slot" from "SkriptGUI/GUIs/%{skriptgui::creatingGUI::%player%::id}%.yml" to rounded (loop-number - 1)
					if name of slot (loop-number - 1) of event-inventory is set:
						set yaml value "gui.slots.slot-%loop-number - 1%.material-name" from "SkriptGUI/GUIs/%{skriptgui::creatingGUI::%player%::id}%.yml" to name of slot (loop-number - 1) of event-inventory
					set yaml value "gui.slots.slot-%loop-number - 1%.close-on-click" from "SkriptGUI/GUIs/%{skriptgui::creatingGUI::%player%::id}%.yml" to true
					if {SkriptGUI::creatingGUI::%player%::NBT} isn't set:
						if lore of slot (loop-number - 1) of event-inventory is set:
							set yaml list "gui.slots.slot-%loop-number - 1%.item.lore" from "SkriptGUI/GUIs/%{skriptgui::creatingGUI::%player%::id}%.yml" to lore of slot (loop-number - 1) of event-inventory
						set yaml value "gui.slots.slot-%loop-number - 1%.item.shiny" from "SkriptGUI/GUIs/%{skriptgui::creatingGUI::%player%::id}%.yml" to true
						set yaml value "gui.slots.slot-%loop-number - 1%.item.hide-flags" from "SkriptGUI/GUIs/%{skriptgui::creatingGUI::%player%::id}%.yml" to false
					else:
						set yaml value "gui.slots.slot-%loop-number -1%.item.NBT" from "SkriptGUI/GUIs/%{skriptgui::creatingGUI::%player%::id}%.yml" to nbt of slot (loop-number -1) of event-inventory
			save yaml "SkriptGUI/GUIs/%{skriptgui::creatingGUI::%player%::id}%.yml"
			send "%{SkriptGUI::prefix}% &2GUI &e%{SkriptGUI::creatingGUI::%player%::id}% &2created!"
			delete {SkriptGUI::creatingGUI::%player%::*} and {SkriptGUI::creatingGUI::%player%}
	if metadata value "GUI" of player is set:
		set {_gui} to metadata value "GUI" of player
		set {_close-commands::player::*} to placeholder parsed yaml list "gui.close-commands.player" from "SkriptGUI/GUIs/%{_gui}%.yml" from player
		set {_close-commands::console::*} to placeholder parsed yaml list "gui.close-commands.console" from "SkriptGUI/GUIs/%{_gui}%.yml" from player
		set {_close-messages::*} to placeholder parsed yaml list "gui.close-messages" from "SkriptGUI/GUIs/%{_gui}%.yml" from player
		loop {_close-commands::player::*}:
			execute player command loop-value
		loop {_close-commands::console::*}:
			execute console command loop-value
		replace "%%prefix%%" with "%{skriptgui::prefix}%" in {_close-messages::*}
		send colored join {_close-messages::*} with last character of new line to player
		delete metadata value "GUI" of player
on join:
	wait 5 tick
	delete metadata value "GUI" of player
	if yaml value "join-gui" from "SkriptGUI/config" is set:
		openGUI(player, yaml value "join-gui" from "SkriptGUI/config")
first join:
	wait 5 tick
	if yaml value "first-join-gui" from "SkriptGUI/config" is set:
		openGUI(player, yaml value "join-gui" from "SkriptGUI/config")
on command:
	if yaml value "gui-commands./%full command%" from "SkriptGUI/config" is set:
		cancel event
		openGUI(player, yaml value "gui-commands./%full command%" from "SkriptGUI/config")
on rightclick on sign:
	loop yaml node keys "signDatas" from "SkriptGUI/signData":
		if yaml value "signDatas.%loop-value%.location" from "SkriptGUI/signData" is block's location:
			openGUI(player, yaml value "signDatas.%loop-value%.GUI" from "SkriptGUI/signData")
			stop
on break of sign:
	if player has permission "%{SkriptGUI::adminPerm}%":
		loop yaml node keys "signDatas" from "SkriptGUI/signData":
			if yaml value "signDatas.%loop-value%.location" from "SkriptGUI/signData" is block's location:
				if player is sneaking:
					delete yaml value "signDatas.%loop-value%" from "SkriptGUI/signData"
					save yaml "SkriptGUI/signData" without extra lines between nodes
					send "%{SkriptGUI::prefix}% &2You succesfully broke a GUI sign."
				else:
					cancel event
					send "%{SkriptGUI::prefix}% &cYou have to sneak if you want to break this GUI sign."
				stop
on load:
	execute console command "skgui reload"
	set {SkriptGUI::guiClickTypes::*} to ...(click type.getUsage()) split at ", "
on skript load:
	delete {SkriptGUI::creatingGUI::*}
